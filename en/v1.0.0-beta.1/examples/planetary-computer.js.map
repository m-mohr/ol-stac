{"version":3,"file":"planetary-computer.js","mappings":"wJAgBAA,eAAeC,EAAKC,GAClB,MAAMC,EAAS,IAAIC,gBAAgB,CAACF,SAC9BG,QAAiBC,MACrB,2DAA2DH,KAG7D,aADmBE,EAASE,QAChBL,IACd,EAfA,E,QAAA,IAAS,KAiBT,MAAMM,EAAQ,IAAI,IAAK,CACrBC,IAAK,8IACLC,OAAQ,CAAC,UACT,6BAAMC,CAAwBC,GAC5B,IAAK,MAAMC,KAAUD,EAAQE,QAC3BD,EAAOJ,UAAYR,EAAKY,EAAOJ,KAEjC,OAAOG,CACT,IAGIG,EAAa,IAAI,IAAU,CAC/BF,OAAQ,IAAI,MAGRG,EAAM,IAAI,IAAI,CAClBC,OAAQ,MACRC,OAAQ,CAACH,EAAYP,GACrBW,KAAM,IAAI,KAAK,CACbC,OAAQ,CAAC,EAAG,GACZC,KAAM,MAIVb,EAAMc,GAAG,eAAe,KACTN,EAAIO,UACZC,IAAIhB,EAAMiB,YAAY,G","sources":["webpack:///./planetary-computer.js"],"sourcesContent":["import Map from 'ol/Map.js';\nimport OSM from 'ol/source/OSM.js';\nimport STAC from '../src/ol/layer/STAC.js';\nimport TileLayer from 'ol/layer/WebGLTile.js';\nimport View from 'ol/View.js';\nimport proj4 from 'proj4';\nimport {register} from 'ol/proj/proj4.js';\n\nregister(proj4); // required to support source reprojection\n\n/**\n * Get a Shared Access Signature Token to authorize asset requests.\n * See https://planetarycomputer.microsoft.com/docs/concepts/sas/\n * @param {string} href The unsigned URL.\n * @return {Promise<string>} A promise for the signed URL.\n */\nasync function sign(href) {\n  const params = new URLSearchParams({href});\n  const response = await fetch(\n    `https://planetarycomputer.microsoft.com/api/sas/v1/sign?${params}`\n  );\n  const body = await response.json();\n  return body.href;\n}\n\nconst layer = new STAC({\n  url: 'https://planetarycomputer.microsoft.com/api/stac/v1/collections/sentinel-2-l2a/items/S2B_MSIL2A_20220909T185929_R013_T10TES_20220910T222807',\n  assets: ['visual'],\n  async getGeoTIFFSourceOptions(options) {\n    for (const source of options.sources) {\n      source.url = await sign(source.url);\n    }\n    return options;\n  },\n});\n\nconst background = new TileLayer({\n  source: new OSM(),\n});\n\nconst map = new Map({\n  target: 'map',\n  layers: [background, layer],\n  view: new View({\n    center: [0, 0],\n    zoom: 0,\n  }),\n});\n\nlayer.on('sourceready', () => {\n  const view = map.getView();\n  view.fit(layer.getExtent());\n});\n"],"names":["async","sign","href","params","URLSearchParams","response","fetch","json","layer","url","assets","getGeoTIFFSourceOptions","options","source","sources","background","map","target","layers","view","center","zoom","on","getView","fit","getExtent"],"sourceRoot":""}